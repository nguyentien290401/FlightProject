// <auto-generated />
using System;
using FlightAPI.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightAPI.Migrations
{
    [DbContext(typeof(FlightDbContext))]
    [Migration("20230421094302_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightAPI.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Document_TypeID")
                        .HasColumnType("int");

                    b.Property<int>("FlightID")
                        .HasColumnType("int");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Document_TypeID");

                    b.HasIndex("FlightID");

                    b.HasIndex("GroupID");

                    b.HasIndex("UserID");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document_TypeID = 1,
                            FlightID = 1,
                            GroupID = 1,
                            Name = "Document 1",
                            Note = "Some note",
                            Url = "~/files/News.xlsx",
                            UserID = 1,
                            Version = "1.0"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document_TypeID = 2,
                            FlightID = 1,
                            GroupID = 2,
                            Name = "Document 2",
                            Note = "Update note",
                            Url = "~/files/Characters.xlsx",
                            UserID = 2,
                            Version = "1.1"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2022, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document_TypeID = 1,
                            FlightID = 2,
                            GroupID = 2,
                            Name = "Time line of Fight trip",
                            Note = "Some note",
                            Url = "~/files/Users.xlsx",
                            UserID = 2,
                            Version = "1.0"
                        });
                });

            modelBuilder.Entity("FlightAPI.Models.DocumentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentID");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentFiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentID = 2,
                            FileName = "Ganyu Picture",
                            Url = "~/files/Ganyu-1st prize.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentID = 1,
                            FileName = "Fresher DOCX",
                            Url = "~/files/Fresher-.NET.docx"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2022, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentID = 2,
                            FileName = "Mac Le Nin",
                            Url = "~/files/NỘI DUNG ÔN TẬP TRIẾT HỌC MLN.docx"
                        });
                });

            modelBuilder.Entity("FlightAPI.Models.Document_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Some note",
                            Type_Name = "Load Summary"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Some note for update",
                            Type_Name = "Update Summary"
                        });
                });

            modelBuilder.Entity("FlightAPI.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartureDate = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightCode = "VJ001",
                            LocationFrom = "Ha Noi",
                            LocationTo = "Ho Chi Minh"
                        },
                        new
                        {
                            Id = 2,
                            DepartureDate = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightCode = "VJ002",
                            LocationFrom = "Ho Chi Minh",
                            LocationTo = "Con Dao"
                        });
                });

            modelBuilder.Entity("FlightAPI.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupName = "Pilot",
                            Note = "Some note for pilot"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupName = "Stewardess",
                            Note = "Some notification for crew"
                        });
                });

            modelBuilder.Entity("FlightAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Staff"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Pilot"
                        },
                        new
                        {
                            Id = 4,
                            RoleName = "Stewardess"
                        });
                });

            modelBuilder.Entity("FlightAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetOTP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetOTPExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationOTP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Admin@vietjetair.com",
                            PasswordHash = new byte[] { 63, 177, 90, 134, 198, 49, 58, 190, 201, 249, 31, 83, 55, 102, 179, 7, 105, 199, 240, 58, 231, 120, 167, 128, 255, 62, 224, 78, 200, 86, 214, 167, 1, 248, 251, 161, 156, 130, 123, 206, 114, 232, 161, 58, 251, 177, 192, 82, 246, 245, 109, 209, 44, 67, 33, 36, 10, 83, 227, 198, 159, 34, 16, 109 },
                            PasswordSalt = new byte[] { 20, 22, 208, 176, 35, 217, 107, 65, 37, 9, 203, 28, 98, 181, 158, 179, 101, 96, 193, 249, 22, 28, 115, 127, 181, 70, 143, 208, 170, 11, 103, 140, 77, 148, 124, 153, 38, 233, 130, 253, 73, 86, 218, 30, 134, 37, 55, 212, 140, 229, 251, 55, 147, 95, 25, 167, 177, 98, 87, 31, 230, 44, 124, 91, 133, 34, 198, 218, 111, 89, 56, 52, 253, 160, 138, 76, 103, 130, 90, 137, 74, 210, 222, 177, 232, 218, 29, 73, 14, 188, 105, 188, 155, 226, 231, 77, 213, 138, 180, 235, 33, 185, 155, 90, 36, 65, 200, 220, 77, 244, 214, 249, 140, 231, 57, 238, 244, 84, 5, 118, 229, 136, 48, 238, 180, 94, 83, 94 },
                            Phone = "098765421",
                            RoleID = 1,
                            Username = "Admin",
                            VerificationOTP = "773198",
                            VerifiedAt = new DateTime(2023, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Email = "Staff@vietjetair.com",
                            PasswordHash = new byte[] { 63, 177, 90, 134, 198, 49, 58, 190, 201, 249, 31, 83, 55, 102, 179, 7, 105, 199, 240, 58, 231, 120, 167, 128, 255, 62, 224, 78, 200, 86, 214, 167, 1, 248, 251, 161, 156, 130, 123, 206, 114, 232, 161, 58, 251, 177, 192, 82, 246, 245, 109, 209, 44, 67, 33, 36, 10, 83, 227, 198, 159, 34, 16, 109 },
                            PasswordSalt = new byte[] { 20, 22, 208, 176, 35, 217, 107, 65, 37, 9, 203, 28, 98, 181, 158, 179, 101, 96, 193, 249, 22, 28, 115, 127, 181, 70, 143, 208, 170, 11, 103, 140, 77, 148, 124, 153, 38, 233, 130, 253, 73, 86, 218, 30, 134, 37, 55, 212, 140, 229, 251, 55, 147, 95, 25, 167, 177, 98, 87, 31, 230, 44, 124, 91, 133, 34, 198, 218, 111, 89, 56, 52, 253, 160, 138, 76, 103, 130, 90, 137, 74, 210, 222, 177, 232, 218, 29, 73, 14, 188, 105, 188, 155, 226, 231, 77, 213, 138, 180, 235, 33, 185, 155, 90, 36, 65, 200, 220, 77, 244, 214, 249, 140, 231, 57, 238, 244, 84, 5, 118, 229, 136, 48, 238, 180, 94, 83, 94 },
                            Phone = "098765421",
                            RoleID = 2,
                            Username = "GO Employee",
                            VerificationOTP = "538203",
                            VerifiedAt = new DateTime(2023, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Email = "Pilot@vietjetair.com",
                            PasswordHash = new byte[] { 63, 177, 90, 134, 198, 49, 58, 190, 201, 249, 31, 83, 55, 102, 179, 7, 105, 199, 240, 58, 231, 120, 167, 128, 255, 62, 224, 78, 200, 86, 214, 167, 1, 248, 251, 161, 156, 130, 123, 206, 114, 232, 161, 58, 251, 177, 192, 82, 246, 245, 109, 209, 44, 67, 33, 36, 10, 83, 227, 198, 159, 34, 16, 109 },
                            PasswordSalt = new byte[] { 20, 22, 208, 176, 35, 217, 107, 65, 37, 9, 203, 28, 98, 181, 158, 179, 101, 96, 193, 249, 22, 28, 115, 127, 181, 70, 143, 208, 170, 11, 103, 140, 77, 148, 124, 153, 38, 233, 130, 253, 73, 86, 218, 30, 134, 37, 55, 212, 140, 229, 251, 55, 147, 95, 25, 167, 177, 98, 87, 31, 230, 44, 124, 91, 133, 34, 198, 218, 111, 89, 56, 52, 253, 160, 138, 76, 103, 130, 90, 137, 74, 210, 222, 177, 232, 218, 29, 73, 14, 188, 105, 188, 155, 226, 231, 77, 213, 138, 180, 235, 33, 185, 155, 90, 36, 65, 200, 220, 77, 244, 214, 249, 140, 231, 57, 238, 244, 84, 5, 118, 229, 136, 48, 238, 180, 94, 83, 94 },
                            Phone = "098765421",
                            RoleID = 3,
                            Username = "Pilot",
                            VerificationOTP = "345453",
                            VerifiedAt = new DateTime(2023, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Email = "Stewardess@vietjetair.com",
                            PasswordHash = new byte[] { 63, 177, 90, 134, 198, 49, 58, 190, 201, 249, 31, 83, 55, 102, 179, 7, 105, 199, 240, 58, 231, 120, 167, 128, 255, 62, 224, 78, 200, 86, 214, 167, 1, 248, 251, 161, 156, 130, 123, 206, 114, 232, 161, 58, 251, 177, 192, 82, 246, 245, 109, 209, 44, 67, 33, 36, 10, 83, 227, 198, 159, 34, 16, 109 },
                            PasswordSalt = new byte[] { 20, 22, 208, 176, 35, 217, 107, 65, 37, 9, 203, 28, 98, 181, 158, 179, 101, 96, 193, 249, 22, 28, 115, 127, 181, 70, 143, 208, 170, 11, 103, 140, 77, 148, 124, 153, 38, 233, 130, 253, 73, 86, 218, 30, 134, 37, 55, 212, 140, 229, 251, 55, 147, 95, 25, 167, 177, 98, 87, 31, 230, 44, 124, 91, 133, 34, 198, 218, 111, 89, 56, 52, 253, 160, 138, 76, 103, 130, 90, 137, 74, 210, 222, 177, 232, 218, 29, 73, 14, 188, 105, 188, 155, 226, 231, 77, 213, 138, 180, 235, 33, 185, 155, 90, 36, 65, 200, 220, 77, 244, 214, 249, 140, 231, 57, 238, 244, 84, 5, 118, 229, 136, 48, 238, 180, 94, 83, 94 },
                            Phone = "098765421",
                            RoleID = 4,
                            Username = "Stewardess",
                            VerificationOTP = "773358",
                            VerifiedAt = new DateTime(2023, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FlightAPI.Models.Document", b =>
                {
                    b.HasOne("FlightAPI.Models.Document_Type", "DocumentType")
                        .WithMany()
                        .HasForeignKey("Document_TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightAPI.Models.Flight", "Flight")
                        .WithMany("Documents")
                        .HasForeignKey("FlightID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightAPI.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightAPI.Models.User", "User")
                        .WithMany("Document")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Flight");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightAPI.Models.DocumentFile", b =>
                {
                    b.HasOne("FlightAPI.Models.Document", null)
                        .WithMany("DocumentFiles")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightAPI.Models.User", null)
                        .WithMany("DocumentFiles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FlightAPI.Models.User", b =>
                {
                    b.HasOne("FlightAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlightAPI.Models.Document", b =>
                {
                    b.Navigation("DocumentFiles");
                });

            modelBuilder.Entity("FlightAPI.Models.Flight", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("FlightAPI.Models.User", b =>
                {
                    b.Navigation("Document");

                    b.Navigation("DocumentFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
